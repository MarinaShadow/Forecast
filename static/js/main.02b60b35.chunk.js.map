{"version":3,"sources":["bus/forecast/types.js","bus/forecast/reducer.js","init/rootReducer.js","init/middleware.js","init/store.js","init/moment.js","bus/forecast/components/filter/formElements/input.js","bus/forecast/components/filter/formElements/typeWeather.js","bus/forecast/components/filter/formElements/checkboxTypeWeather.js","api/index.js","api/config.js","bus/forecast/actions.js","bus/forecast/components/filter/initialValues.js","bus/forecast/components/filter/validationSchema.js","bus/forecast/components/filter/index.js","bus/forecast/components/filter/hooks/index.js","bus/forecast/components/head/index.js","bus/forecast/components/head/hooks/index.js","bus/forecast/components/currentWeather/index.js","bus/forecast/components/currentWeather/hooks/index.js","bus/forecast/components/forecast/index.js","bus/forecast/components/forecast/hooks/index.js","bus/forecast/index.js","serviceWorker.js","index.js","app.js"],"names":["types","Object","freeze","FORECAST_START_FETCHING","FORECAST_STOP_FETCHING","FORECAST_FILL","FORECAST_SET_FETCHING_ERROR","FORECAST_GET_CURRENT_DAY","FORECAST_GET_FILTER","FORECAST_FETCH_ASYNC","initialState","data","isFetching","error","currentDay","submitting","getData","payloadNew","map","d","day","moment","utc","filteredData","stateCurrent","filter","type","minTemperature","temperature","maxTemperature","rootReducer","combineReducers","forecast","state","payload","find","index","composeEnhancers","createLogger","duration","collapsed","colors","title","action","prevState","nextState","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","store","createStore","applyMiddleware","locale","Input","label","props","useField","field","className","htmlFor","id","name","typeWeather","TypeWeather","useFormikContext","setFieldValue","values","selectedCX","cx","key","onClick","api","fetch","method","forecastActions","startFetching","stopFetching","fill","getCurrentDay","getCurrentFilter","setFetchingError","getCurrentDayActive","dispatch","a","async","getFilter","param","fetchAsync","response","status","json","results","initialValues","validationSchema","Yup","shape","max","matches","oneOf","Filter","useDispatch","filtration","getValue","reset","useSelector","useFilter","onSubmit","isValid","setValues","dirty","disabled","Head","formatWeekDay","format","formatDay","showHeader","length","useHeader","styleCX","CurrentWeather","rainProbability","rain_probability","humidity","showWeather","useCurrentWeather","Forecast","useState","activeDay","setActiveDay","useEffect","getDay","useForecastFetch","Source","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.02b60b35.chunk.js","sourcesContent":["export const types = Object.freeze({\r\n    // Sync\r\n    FORECAST_START_FETCHING: 'FORECAST_START_FETCHING',\r\n    FORECAST_STOP_FETCHING: 'FORECAST_STOP_FETCHING',\r\n    FORECAST_FILL: 'FORECAST_FILL',\r\n    FORECAST_SET_FETCHING_ERROR: 'FORECAST_SET_FETCHING_ERROR',\r\n    FORECAST_GET_CURRENT_DAY: 'FORECAST_GET_CURRENT',\r\n    FORECAST_GET_FILTER: 'FORECAST_GET_FILTER',\r\n    // Async\r\n    FORECAST_FETCH_ASYNC: 'COMMENTS_FETCH_ASYNC',\r\n});","// Types\r\nimport { types } from './types';\r\n\r\nimport moment from \"moment\";\r\n\r\nconst initialState = {\r\n    data: null,\r\n    isFetching: false,\r\n    error: null,\r\n    currentDay: null,\r\n    submitting: false,\r\n};\r\n\r\nconst getData = (payloadNew) => payloadNew.map(d=> d && {...d, day: moment(d.day).utc()});\r\n\r\nconst filteredData = (stateCurrent, payloadNew) => {\r\n    return stateCurrent.data.filter(d=> (payloadNew.type !== '') ? (d.type === payloadNew.type) : d)\r\n        .filter(d=> (payloadNew.minTemperature !== '') ? d.temperature >= payloadNew.minTemperature : d)\r\n        .filter(d=> (payloadNew.maxTemperature !== '') ? d.temperature <= payloadNew.maxTemperature : d);\r\n};\r\n\r\n\r\nexport const forecastReducer = (state = initialState, { type, payload}) => {\r\n    switch (type) {\r\n        case types.FORECAST_START_FETCHING:\r\n            return { ...state, isFetching: true };\r\n        case types.FORECAST_STOP_FETCHING:\r\n            return { ...state, isFetching: false };\r\n        case types.FORECAST_SET_FETCHING_ERROR:\r\n            return { ...state, error: payload, isFetching: false, data: null };\r\n        case types.FORECAST_FILL:\r\n            return { ...state, data: getData(payload), currentDay: getData(payload)[0], submitting: false, error: null };\r\n        case types.FORECAST_GET_CURRENT_DAY:\r\n            return { ...state, currentDay: state.data.find((d, index)=> index === payload), error: null };\r\n        case types.FORECAST_GET_FILTER:\r\n            return { ...state, data: filteredData(state, payload),  currentDay: filteredData(state, payload)[0], submitting: true,  error: null };\r\n        default:\r\n            return state;\r\n    }\r\n};","// Core\r\nimport { combineReducers } from 'redux';\r\n\r\n// Reducers\r\nimport { forecastReducer as forecast } from '../bus/forecast/reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    forecast,\r\n});\r\n","// Core\r\nimport { compose } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const logger = createLogger({\r\n    duration: true,\r\n    collapsed: true,\r\n    colors: {\r\n        title: (action) => {\r\n            return action.error ? 'firebrick' : 'deepskyblue';\r\n        },\r\n        prevState: () => '#1C5FAF',\r\n        action:    () => '#149945',\r\n        nextState: () => '#A47104',\r\n        error:     () => '#ff0005',\r\n    }\r\n});\r\n\r\nconst developmentEnvironment = process.env.NODE_ENV === 'development';\r\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\nconst composeEnhancers = developmentEnvironment && devtools ? devtools : compose;\r\n\r\nconst middleware = [thunk];\r\n\r\nif (developmentEnvironment) {\r\n    middleware.push(logger);\r\n}\r\n\r\nexport { composeEnhancers, middleware };\r\n","// Core\r\nimport { createStore, applyMiddleware } from 'redux';\r\n\r\n// Other\r\nimport { rootReducer } from './rootReducer';\r\nimport {\r\n    middleware,\r\n    composeEnhancers\r\n} from './middleware';\r\n\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(...middleware))\r\n);","import moment from \"moment\";\r\nimport 'moment/locale/ru';\r\n\r\nmoment.locale('ru');","// Core\r\nimport React from 'react';\r\nimport {useField} from 'formik';\r\n\r\nexport const Input = ({label, ...props}) => {\r\n    const [field] = useField(props);\r\n    return (\r\n        <>\r\n            <p className=\"custom-input\">\r\n                <label className=\"label\" htmlFor={props.id || props.name}>{label}</label>\r\n                <input\r\n                    {...field}\r\n                    {...props}\r\n                />\r\n            </p>\r\n        </>\r\n    )\r\n};\r\n","export const typeWeather = [\r\n    {\r\n        name: 'cloudy',\r\n        title: 'Облачно',\r\n    }, {\r\n        name: 'sunny',\r\n        title: 'Солнечно',\r\n    }, {\r\n        name: 'rainy',\r\n        title: 'Дождливо',\r\n    }\r\n];","// Core\r\nimport React from 'react';\r\nimport {useFormikContext} from 'formik';\r\nimport {typeWeather} from \"./typeWeather\";\r\nimport cx from \"classnames\";\r\n\r\nexport const TypeWeather = ({submitting}) => {\r\n    const { setFieldValue, values } = useFormikContext();\r\n    return (\r\n        <>\r\n            {typeWeather.map(type => {\r\n                const selectedCX = cx({\r\n                    'checkbox' : true,\r\n                    'selected': type.name === values.type,\r\n                    'blocked': submitting,\r\n                });\r\n                return(\r\n                    <span\r\n                        key={type.name}\r\n                        className={selectedCX}\r\n                        onClick={() => {\r\n                            !submitting && setFieldValue('type', type.name)\r\n                        }}\r\n                    >\r\n                        {type.title}\r\n                    </span>\r\n                )}\r\n            )}\r\n        </>\r\n    )\r\n};\r\n","// Config\r\nimport { root } from './config';\r\n\r\nexport const api = Object.freeze({\r\n    forecast: {\r\n        fetch: () => {\r\n            return fetch(`${root}/forecast`, {\r\n                method: 'GET'\r\n            })\r\n        }\r\n    }\r\n});","export const root = 'https://lab.lectrum.io/rtx/api';","//Types\r\nimport { types} from './types';\r\n\r\n//API\r\nimport { api } from '../../api';\r\n\r\nexport const forecastActions = Object.freeze({\r\n    //Sync\r\n    startFetching: () => {\r\n        return {\r\n            type: types.FORECAST_START_FETCHING\r\n        }\r\n    },\r\n    stopFetching: () => {\r\n        return {\r\n            type: types.FORECAST_STOP_FETCHING\r\n        }\r\n    },\r\n    fill: (payload) => {\r\n        return {\r\n            type: types.FORECAST_FILL,\r\n            payload\r\n        }\r\n    },\r\n    getCurrentDay: (payload) => {\r\n        return {\r\n            type: types.FORECAST_GET_CURRENT_DAY,\r\n            payload\r\n        }\r\n    },\r\n    getCurrentFilter: (payload) => {\r\n        return {\r\n            type: types.FORECAST_GET_FILTER,\r\n            payload\r\n        }\r\n    },\r\n    setFetchingError: (error) => {\r\n        return {\r\n            type: types.FORECAST_SET_FETCHING_ERROR,\r\n            error: true,\r\n            payload: error\r\n        }\r\n    },\r\n    getCurrentDayActive: (id) => async (dispatch) => {\r\n        dispatch(forecastActions.getCurrentDay(id));\r\n    },\r\n    getFilter: (param) => async (dispatch) => {\r\n        dispatch(forecastActions.getCurrentFilter(param));\r\n    },\r\n    //Async\r\n    fetchAsync: () => async (dispatch) => {\r\n        dispatch({\r\n            type: types.FORECAST_FETCH_ASYNC\r\n        });\r\n\r\n        dispatch(forecastActions.startFetching());\r\n\r\n        const response = await api.forecast.fetch();\r\n\r\n        if (response.status === 200) {\r\n\r\n            const results = await response.json();\r\n\r\n            dispatch(forecastActions.fill(results.data));\r\n        } else {\r\n            const error = {\r\n                status: response.status\r\n            };\r\n\r\n            dispatch(forecastActions.setFetchingError(error));\r\n        }\r\n\r\n        dispatch(forecastActions.stopFetching());\r\n    },\r\n});","export const initialValues = {\r\n    minTemperature: '',\r\n    maxTemperature: '',\r\n    type: '',\r\n};\r\n","// Core\r\nimport * as Yup from 'yup';\r\n\r\nexport const validationSchema = Yup.object().shape({\r\n    minTemperature: Yup.string()\r\n        .max(5, 'Min temperature is too long')\r\n        .matches(/^[0-9]*[.,]?[0-9]+$/, 'Min temperature must be number'),\r\n    maxTemperature: Yup.string()\r\n        .max(5, 'Max temperature is too long')\r\n        .matches(/^[0-9]*[.,]?[0-9]+$/, 'Min temperature must be number'),\r\n    type: Yup.string()\r\n        .oneOf(['cloudy', 'sunny', 'Dribble', 'rainy'], 'You should put correct type'),\r\n\r\n});","// Core\r\nimport React from \"react\";\r\nimport { Formik, Form } from 'formik';\r\n\r\n// Form Elements\r\nimport { Input } from './formElements/input';\r\nimport { TypeWeather } from './formElements/checkboxTypeWeather';\r\n\r\n// Hooks\r\nimport { useFilter } from './hooks';\r\n\r\n// Initial values for out Form\r\nimport { initialValues } from './initialValues';\r\nimport { validationSchema } from './validationSchema';\r\n\r\n\r\n\r\nexport const Filter = () => {\r\n    const { filtration, reset, submitting } = useFilter();\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={validationSchema}\r\n            onSubmit={filtration}\r\n        >\r\n            {({ values, isValid, setValues, dirty }) => {\r\n                const clearFilter = () => {\r\n                    setValues({...values, ...initialValues});\r\n                    reset();\r\n                };\r\n                return (\r\n                    <Form>\r\n                        <div className=\"filter\">\r\n                            <TypeWeather submitting={submitting} />\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"minTemperature\"\r\n                                id=\"min-temperature\"\r\n                                label=\"Минимальная температура\"\r\n                                disabled={submitting}\r\n                            />\r\n                            <Input\r\n                                type=\"text\"\r\n                                name=\"maxTemperature\"\r\n                                id=\"max-temperature\"\r\n                                label=\"Максимальная температура\"\r\n                                disabled={submitting}\r\n                            />\r\n                            <button\r\n                                type={!submitting ? 'submit' : 'button'}\r\n                                disabled={!dirty || !isValid}\r\n                                onClick={() => submitting && clearFilter()}\r\n                            >\r\n                                {!submitting ? 'Отфильтровать' : 'Сбросить'}\r\n                            </button>\r\n                        </div>\r\n                    </Form>\r\n                    )}}\r\n        </Formik>\r\n    )\r\n};","//Core\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {forecastActions} from \"../../../actions\";\r\n\r\n\r\nexport const useFilter = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const filtration = (values) => {\r\n        const getValue = {\r\n            minTemperature: values.minTemperature,\r\n            maxTemperature: values.maxTemperature,\r\n            type:  values.type,\r\n        };\r\n\r\n        dispatch(forecastActions.getFilter(getValue));\r\n    };\r\n\r\n    const reset = () => {\r\n        dispatch(forecastActions.fetchAsync());\r\n    };\r\n\r\n    const {\r\n        submitting,\r\n    } = useSelector((state) => state.forecast);\r\n\r\n\r\n    return {\r\n        filtration,\r\n        reset,\r\n        submitting,\r\n    }\r\n};","// Core\r\nimport React from \"react\";\r\nimport cx from \"classnames\";\r\n//Hooks\r\nimport { useHeader } from './hooks'\r\n\r\n\r\nexport const Head = () => {\r\n    const {type, day, formatWeekDay, formatDay, showHeader} = useHeader();\r\n\r\n    const styleCX = cx({\r\n        'icon': true,\r\n        [`${type}`]: true,\r\n    });\r\n\r\n    return (\r\n        showHeader &&\r\n        <div className=\"head\">\r\n            <div className={styleCX}></div>\r\n            <div className=\"current-date\">\r\n                <p>{formatWeekDay(day)}</p>\r\n                <span>{formatDay(day)}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n};","//Core\r\nimport { useSelector } from 'react-redux';\r\nimport moment from \"moment\";\r\n\r\nexport const useHeader = () => {\r\n\r\n    const formatWeekDay = (d) => {\r\n        return moment(d).format('dddd');\r\n    };\r\n    const formatDay = (d) => {\r\n        return moment(d).format('DD MMMM');\r\n    };\r\n\r\n    const {\r\n        currentDay,\r\n        data,\r\n    } = useSelector((state) => state.forecast);\r\n\r\n    const type = currentDay && currentDay.type;\r\n    const day = currentDay && currentDay.day;\r\n\r\n    const showHeader = data && data.length > 0;\r\n\r\n    return {\r\n        type,\r\n        day,\r\n        formatWeekDay,\r\n        formatDay,\r\n        showHeader,\r\n    }\r\n};","// Core\r\nimport React from \"react\";\r\n// Hooks\r\nimport { useCurrentWeather } from './hooks';\r\n\r\n\r\nexport const CurrentWeather = () => {\r\n    const {temperature, rainProbability, humidity, showWeather} = useCurrentWeather();\r\n\r\n    return (\r\n        showWeather &&\r\n        <div className=\"current-weather\">\r\n            <p className=\"temperature\">{temperature}</p>\r\n            <p className=\"meta\">\r\n                <span className=\"rainy\">%{rainProbability}</span>\r\n                <span className=\"humidity\">%{humidity}</span>\r\n            </p>\r\n        </div>\r\n    )\r\n};","//Core\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const useCurrentWeather = () => {\r\n\r\n    const {\r\n        currentDay,\r\n        data,\r\n    } = useSelector((state) => state.forecast);\r\n\r\n\r\n    const temperature = currentDay && currentDay.temperature;\r\n    const rainProbability = currentDay && currentDay.rain_probability;\r\n    const humidity = currentDay && currentDay.humidity;\r\n\r\n    const showWeather = data && data.length > 0;\r\n\r\n    return {\r\n        temperature,\r\n        rainProbability,\r\n        humidity,\r\n        showWeather,\r\n    }\r\n};","// Core\r\nimport React from \"react\";\r\nimport cx from 'classnames';\r\n\r\n//Hooks\r\nimport { useForecastFetch } from './hooks'\r\n\r\n\r\n\r\nexport const Forecast = () => {\r\n    const { data, getDay, activeDay, formatDay } = useForecastFetch();\r\n\r\n    return (\r\n        <div className=\"forecast\">\r\n            {data && data.length > 0 ? data.filter((day, index) => index < 7).map((day, index)=>{\r\n                const styleCX = cx({\r\n                    'day': true,\r\n                    'selected': index === activeDay,\r\n                    [`${day.type}`]: true,\r\n                });\r\n                return (\r\n                    <div\r\n                        key={index}\r\n                        className={styleCX}\r\n                        onClick={() => getDay(index)}\r\n                    >\r\n                        <p>{formatDay(day.day)}</p>\r\n                        <span>{day.temperature}</span>\r\n                    </div>\r\n                )\r\n            }) :\r\n                <p className=\"message\">По заданным критериям нет доступных дней!</p>\r\n            }\r\n        </div>\r\n    )\r\n};","//Core\r\nimport { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport moment from \"moment\";\r\n\r\n// Actions\r\nimport { forecastActions } from '../../../actions';\r\n\r\nexport const useForecastFetch = () => {\r\n    const dispatch = useDispatch();\r\n    const [activeDay, setActiveDay] = useState(0);\r\n\r\n    useEffect(() => {\r\n        dispatch(forecastActions.fetchAsync());\r\n    }, [dispatch]);\r\n\r\n    const {\r\n        data,\r\n    } = useSelector((state) => state.forecast);\r\n\r\n    const getDay = (index) => {\r\n        dispatch(forecastActions.getCurrentDayActive(index));\r\n        setActiveDay(index);\r\n    };\r\n\r\n    const formatDay = (d) => {\r\n        return moment(d).format('dddd');\r\n    };\r\n\r\n    return {\r\n        data,\r\n        getDay,\r\n        activeDay,\r\n        formatDay,\r\n    }\r\n};","import React from 'react';\r\n\r\nimport '../../source/styles/index.scss';\r\n// Components\r\nimport { Filter } from './components/filter';\r\nimport { Head } from './components/head';\r\nimport { CurrentWeather } from './components/currentWeather';\r\nimport { Forecast } from './components/forecast';\r\n\r\nexport const Source = () => {\r\n  return (\r\n    <>\r\n      <main>\r\n        <Filter />\r\n        <Head />\r\n        <CurrentWeather />\r\n        <Forecast />\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { App } from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './init/store';\r\nimport './init/moment';\r\n\r\nimport { Source } from './bus/forecast';\r\n\r\n\r\nexport const App = () => {\r\n  return (\r\n      <Provider store={ store }>\r\n        <Source />\r\n      </Provider>\r\n  )\r\n};\r\n"],"sourceRoot":""}